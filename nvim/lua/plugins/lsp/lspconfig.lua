return {
  -- 'neovim/nvim-lspconfig',
  -- event = { 'BufReadPre', 'BufNewFile' },
  -- dependencies = {
  --   'hrsh7th/cmp-nvim-lsp',
  --   {
  --     'antosha417/nvim-lsp-file-operations',
  --     config = true,
  --   },
  -- },
  -- config = function()
  --   local lspconfig = require('lspconfig')
  --   local cmp_nvim_lsp = require('cmp_nvim_lsp')
  --   local keymap = vim.keymap
  --   local opts = { noremap = true, silent = true }
  --   local on_attach = function(_, bufnr)
  --     opts.buffer = bufnr
  --
  --     -- set keybinds
  --     opts.desc = 'Show LSP references'
  --     keymap.set('n', 'gr', '<cmd>Telescope lsp_references<CR>', opts) -- show definition, references
  --
  --     opts.desc = 'Show LSP definitions'
  --     keymap.set('n', 'gd', '<cmd>Telescope lsp_definitions<CR>', opts) -- show lsp definitions
  --
  --     opts.desc = 'See available code actions'
  --     keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection
  --
  --     opts.desc = 'Smart rename'
  --     keymap.set('n', '<leader>cr', vim.lsp.buf.rename, opts) -- smart rename
  --
  --     opts.desc = 'Show line diagnostics'
  --     keymap.set('n', '<leader>cd', vim.diagnostic.open_float, opts) -- show diagnostics for line
  --
  --     opts.desc = 'Show documentation for what is under cursor'
  --     keymap.set('n', 'K', vim.lsp.buf.hover, opts) -- show documentation for what is under cursor
  --   end
  --   local capabilities = cmp_nvim_lsp.default_capabilities()
  --
  --   -- configure html server
  --   lspconfig['html'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --   })
  --
  --   -- configure css server
  --   lspconfig['cssls'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --   })
  --
  --   -- configure tailwindcss server
  --   lspconfig['tailwindcss'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --   })
  --
  --   -- configure svelte server
  --   lspconfig['svelte'].setup({
  --     capabilities = capabilities,
  --     on_attach = function(client, bufnr)
  --       on_attach(client, bufnr)
  --
  --       vim.api.nvim_create_autocmd('BufWritePost', {
  --         pattern = { '*.js', '*.ts' },
  --         callback = function(ctx)
  --           if client.name == 'svelte' then
  --             client.notify('$/onDidChangeTsOrJsFile', { uri = ctx.file })
  --           end
  --         end,
  --       })
  --     end,
  --   })
  --
  --   -- configure prisma orm server
  --   lspconfig['prismals'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --   })
  --
  --   -- configure graphql language server
  --   lspconfig['graphql'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --     filetypes = {
  --       'graphql',
  --       'gql',
  --       'svelte',
  --       'typescriptreact',
  --       'javascriptreact',
  --     },
  --   })
  --
  --   -- configure emmet language server
  --   lspconfig['emmet_ls'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --     filetypes = {
  --       'html',
  --       'typescriptreact',
  --       'javascriptreact',
  --       'css',
  --       'sass',
  --       'scss',
  --       'less',
  --       'svelte',
  --     },
  --   })
  --
  --   -- configure lua server (with special settings)
  --   lspconfig['lua_ls'].setup({
  --     capabilities = capabilities,
  --     on_attach = on_attach,
  --     settings = { -- custom settings for lua
  --       Lua = {
  --         -- make the language server recognize "vim" global
  --         diagnostics = {
  --           globals = { 'vim' },
  --         },
  --         workspace = {
  --           -- make language server aware of runtime files
  --           library = {
  --             [vim.fn.expand('$VIMRUNTIME/lua')] = true,
  --             [vim.fn.stdpath('config') .. '/lua'] = true,
  --           },
  --         },
  --       },
  --     },
  --   })
  -- end,
}
